@{
    ViewData["Title"] = "Dashboard 1";
}


<section class="container-dashboard">
    <h2>Dashboard 1</h2>
    <section class="container-dados">
        <div class="container-dados__subitens">
            <label>Valor do Erro</label>
            <div class="container-dados__subitens-value">14,66°C</div>
        </div>
        <div class="container-dados__subitens">
            <label>Constante de Tempo</label>
            <div class ="container-dados__subitens-value">66,3s</div>
        </div>
        <div class="container-dados__subitens">
            <label>Constante de ganho</label>
            <div class="container-dados__subitens-value">0,175</div>
        </div>
        <div class="container-dados__subitens">
            <label>SetPoint</label>
            <div class="container-dados__subitens-value">40°C</div>
        </div>
    </section>
    <div class="container-grafico">
        <div class="container-grafico__grafico">
            <canvas id="chartDashboard1"></canvas>
        </div>
        <div style="display:flex; flex-direction: column;width: 30%;">
            <div class="container-SetPoint">
                <label for="SetPoint" class="form-label">SetPoint</label>
                <div class="input-group">
                    <input type="text"
                           id="SetPoint"
                           name="SetPoint"
                           class="form-control"
                           value=""
                           placeholder="Insira o valor" />
                    <button class="btn btn-primary"
                            type="button"
                            onclick="enviarSetPoint()">
                        Enviar
                    </button>
                </div>
            </div>
            <div class="container-grafico__legenda">
                <table>
                    <caption>Legenda</caption>
                    <tr>
                        <th>Sigla</th>
                        <th>Descrição</th>
                    </tr>
                    <tr>
                        <td>TP</td>
                        <td>Valor de temperatura em °C</td>
                    </tr>
                </table>
            </div>
            <div class="container-dados-reais" id="container-dados-reais-temperatura">
                <label class="dados_label">Temperatura</label>
                <div class="dados-value" id="temperature-value"></div>
            </div>
        </div>
        
    </div>
    
</section>
<div id="alerta" class="alert d-none" role="alert">
    <span id="alerta-mensagem"></span>
    <button type="button" class="close" onclick="fecharAlerta()" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    let currentSetPoint = null;
    let chart; // Variável global para o gráfico

    document.addEventListener("DOMContentLoaded", async function () {
        
        async function fetchDataDashboard1(dataObject) {
            try {
                const response = await fetch(`/Dashboard/GetData?dataObject=${dataObject}`);
                if (!response.ok) {
                    throw new Error(`Erro ao buscar dados: ${response.statusText}`);
                }
                const data = await response.json();
                return data.contextResponses[0].contextElement.attributes[0].values;
            } catch (error) {
                console.error(error);
                document.getElementById('alerta-mensagem').textContent = 'Erro ao carregar dados.';
                document.getElementById('alerta').classList.add('show', 'alert-danger');
                return [];
            }
        }

        function processAPIData(apiData) {
            const labels = [];
            const values = [];

            apiData.forEach(item => {
                labels.push(new Date(item.recvTime).toLocaleTimeString());
                values.push(item.attrValue);
            });

            return { labels, values };
        }

        async function updateChart() {
            const apiDataTemperature = await fetchDataDashboard1("temperature");
            const { labels, values: valuesTemperature } = processAPIData(apiDataTemperature);

            document.getElementById('temperature-value').textContent = valuesTemperature[valuesTemperature.length - 1] || 'N/A';

            if (valuesTemperature[valuesTemperature.length - 1] >= 40) {
                mudaCorTemperatura();
            } else {
                alertaTemperatura.classList.add('container-dados-reais');
                alertaTemperatura.classList.remove('alert-dados');
            }

           if (!chart) {
                // Criar o gráfico pela primeira vez
                const ctx = document.getElementById('chartDashboard1').getContext('2d');
                chart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: 'TP',
                                data: valuesTemperature,
                                fill: false,
                                borderColor: 'rgba(255, 99, 132, 1)',
                                tension: 0.1
                            },
                            {
                                label: 'SetPoint',
                                data: Array(labels.length).fill(currentSetPoint || 0), // Preenche com SetPoint
                                fill: false,
                                borderColor: 'rgba(54, 162, 235, 1)',
                                borderDash: [5, 5], // Linha tracejada para diferenciar
                                tension: 0.1
                            }
                        ]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Valor'
                                }
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Horário'
                                }
                            }
                        }
                    }
                });
            } else {
                // Atualizar os dados do gráfico existente
                chart.data.labels = labels;
                chart.data.datasets[0].data = valuesTemperature;

                chart.data.datasets[1].data = Array(labels.length).fill(currentSetPoint || 0);

                chart.update(); // Atualizar o gráfico com novos dados
            }
        }

        // Atualizar o gráfico ao carregar a página
        await updateChart();

        // Atualizar o gráfico automaticamente a cada 1 minuto (60000 milissegundos)
        setInterval(updateChart, 5000);
    });

    function enviarSetPoint() {
        const setPointInput = document.getElementById('SetPoint').value;
        if (isNaN(setPointInput) || setPointInput === '') {
            alert('Por favor, insira um número válido.');
            return;
        }
        currentSetPoint = parseFloat(setPointInput);

        if (setPointInput < 0 || setPointInput > 100) {
            alert('O SetPoint deve estar entre 0 e 100.');
            return;
        }
        // Atualizar o gráfico com o novo SetPoint
        if (chart) {
            chart.data.datasets[1].data = Array(chart.data.labels.length).fill(currentSetPoint);
            chart.update();
            alert('SetPoint atualizado para: ' + currentSetPoint + '°C.');
        }

    }

    const alertaTemperatura = document.getElementById('container-dados-reais-temperatura');

    function mudaCorTemperatura() {
        alertaTemperatura.classList.add('alert-dados');
        alertaTemperatura.classList.remove('container-dados-reais');
        ativaAlerta("temperatura");
    }

    function fecharAlerta() {
        const alerta = document.getElementById("alerta");
        alerta.classList.add("show");

        $.ajax({
            type: "POST",
            url: "/Dashboard/ApagaLampada",
            success: function () {
                console.log("Lâmpada apagada com sucesso.");
            },
            error: function () {
                console.error("Erro ao tentar apagar a lâmpada.");
            }
        });
    }

    // Ajuste na função `ativaAlerta` para exibir a mensagem de forma mais clara
    function ativaAlerta(unidade) {
        $.ajax({
            type: "POST",
            url: "/Dashboard/AtivaAlarme",
            data: { unidade: unidade },
            success: function (response) {
                const alerta = $("#alerta");
                $("#alerta-mensagem").text(response.mensagem);
                alerta.removeClass("d-none alert-danger alert-success")
                    .addClass(response.sucesso ? "alert-warning" : "alert-danger");
                alerta.show();
            },
            error: function () {
                const alerta = $("#alerta");
                $("#alerta-mensagem").text("Erro ao processar a operação.");
                alerta.removeClass("d-none alert-success").addClass("alert-danger");
                alerta.show();
            }
        });
    }
</script>

<style>
    main {
        width: 100%;
    }

    .container-dashboard {
        display: flex;
        flex-direction: column;
        width: 100%;
        align-content: center;
        justify-content: center;
    }

        .container-dashboard > h2 {
            display: flex;
            width: 100%;
            justify-content: center;
            padding: 1em 0px;
        }

    .container-dados {
        display: flex;
        flex-direction: row;
        width: 100%;
        justify-content: space-around;
        padding: 20px;
        gap: 20px;
        background: linear-gradient(135deg, #1d2731, #253544);
        border-radius: 12px;
    }

    .container-dados__subitens {
        display: flex;
        flex-direction: column;
        width: 22%;
        align-items: center;
        justify-content: center;
        border-radius: 15px;
        background-color: #1e3a5f;
        box-shadow: 0px 6px 15px rgba(0, 0, 0, 0.4);
        transition: transform 0.3s, box-shadow 0.3s;
        overflow: hidden;
        text-align: center;
        padding: 15px;
    }

        .container-dados__subitens:hover {
            transform: translateY(-5px);
            box-shadow: 0px 8px 20px rgba(0, 0, 0, 0.5);
        }

    label {
        font-size: 1.6rem;
        font-weight: bold;
        color: #ffffff;
        margin-bottom: 10px;
    }

    .container-dados__subitens-value {
        font-size: 1.4em;
        font-weight: 600;
        color: #a0c4ff;
        background-color: #1e3a5f;
        padding: 10px;
        border-radius: 8px;
        width: 100%;
    }

    .container-grafico {
        display: flex;
        flex-direction: row;
        width: 100%;
        margin-top: 2em;
    }

    .container-grafico__grafico {
        width: 70%;
        height: 400px;
    }

    #chartDashboard1 {
        width: 100% !important;
        height: 100% !important;
    }

    .container-grafico__legenda {
        display: flex;
        flex-direction: column;
        width: 100%;
        background: linear-gradient(135deg, #222, #333);
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
        color: #fff;
        padding-left: 1em;
    }

        .container-grafico__legenda table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
            color: #ddd;
            font-family: Arial, sans-serif;
        }

    caption {
        font-weight: bold;
        font-size: 18px;
        color: #fff;
        margin-bottom: 10px;
        background-color: #555;
        padding: 8px;
        border-radius: 8px;
        box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.2);
    }

    th, td {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid #444;
    }

    th {
        background-color: #444;
        font-size: 15px;
        color: #fff;
        text-transform: uppercase;
    }

    td {
        font-size: 14px;
        color: #ccc;
        transition: background-color 0.3s;
    }

    tr:nth-child(even) td {
        background-color: #333;
    }

    tr:hover td {
        background-color: #555;
    }

    .legenda_dashboard{
        display: flex;
        flex-direction: row;
        width: 100%;
        justify-content: space-around;
        align-items: center;
        margin-top: 1em;
    }

    .container-dados-reais{
        display: flex;
        flex-direction: row;
        width: 100%;
        align-items: center;
        padding: 1em;
        border-radius: 1em ;
        background: linear-gradient(135deg, #1d2731, #253544);
        margin-top: 1em;

    }

    .alert-dados {
        display: flex;
        flex-direction: row;
        align-items: center;
        padding: 1em;
        border-radius: 1em;
        background-color: #f52a2adb;
        box-shadow: 0px 0px 8px yellow;
        transition: background-color 0.3s ease;
    }

    .dados-value{
        font-size: 2em;
    }

    .dados_label{
        display: flex;
        width: 70%;
        align-content: center;
        justify-content:center;
        margin-right: 1em;
    }

    #luminosity-value{
        color: rgba(75, 192, 192, 1);
    }

    #temperature-value{
        color: rgba(255, 99, 132, 1);
    }

    #humidity-value{
        color: rgba(54, 162, 235, 1);
    }

    #alerta {
        transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
        opacity: 0;
        transform: translateY(-10px);
    }

    #alerta.show {
        opacity: 1;
        transform: translateY(0);
    }


    .alert-success {
        background-color: #d4edda;
        color: #155724;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }

    .alert-warning {
        background-color: #fff3cd;
        color: #856404;
    }

    .alert-info {
        background-color: #d1ecf1;
        color: #0c5460;
    }

    .container-SetPoint {
        margin: 10px 0;
    }

        .container-SetPoint label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

    .container-SetPoint {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .container-SetPoint input {
        flex: 1;
        padding: 8px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .container-SetPoint button {
        padding: 8px 15px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .container-SetPoint button:hover {
        background-color: #0056b3;
    }
</style>